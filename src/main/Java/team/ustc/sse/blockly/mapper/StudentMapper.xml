<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="team.ustc.sse.blockly.mapper.StudentMapper" >
  <resultMap id="BaseResultMap" type="team.ustc.sse.blockly.entity.Student" >
    <id column="studentID" property="studentid" jdbcType="INTEGER" />
    <result column="studentName" property="studentname" jdbcType="VARCHAR" />
    <result column="studentGender" property="studentgender" jdbcType="VARCHAR" />
    <result column="studentEmail" property="studentemail" jdbcType="VARCHAR" />
    <result column="studentAge" property="studentage" jdbcType="INTEGER" />
    <result column="studentPhone" property="studentphone" jdbcType="VARCHAR" />
    <result column="studentSchool" property="studentschool" jdbcType="VARCHAR" />
    <result column="studentNumber" property="studentnumber" jdbcType="VARCHAR" />
    <result column="studentGrade" property="studentgrade" jdbcType="VARCHAR" />
    <result column="studentRemark" property="studentremark" jdbcType="VARCHAR" />
    <result column="studentRegisterTime" property="studentregistertime" jdbcType="TIMESTAMP" />
  </resultMap>
  <sql id="Example_Where_Clause" >
    <where >
      <foreach collection="oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause" >
    <where >
      <foreach collection="example.oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List" >
    studentID, studentName, studentGender, studentEmail, studentAge, studentPhone, studentSchool, 
    studentNumber, studentGrade, studentRemark, studentRegisterTime
  </sql>
  <select id="selectByExample" resultMap="BaseResultMap" parameterType="team.ustc.sse.blockly.entity.StudentExample" >
    select
    <if test="distinct" >
      distinct
    </if>
    <include refid="Base_Column_List" />
    from student
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    select 
    <include refid="Base_Column_List" />
    from student
    where studentID = #{studentid,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from student
    where studentID = #{studentid,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="team.ustc.sse.blockly.entity.StudentExample" >
    delete from student
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="team.ustc.sse.blockly.entity.Student" >
    <selectKey resultType="java.lang.Integer" keyProperty="studentid" order="AFTER" >
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into student (studentID, studentName, studentGender, studentEmail,
      studentAge, studentPhone, studentSchool, 
      studentNumber, studentGrade, studentRemark, 
      studentRegisterTime)
    values (#{studentid,jdbcType=INTEGER},#{studentname,jdbcType=VARCHAR}, #{studentgender,jdbcType=VARCHAR}, #{studentemail,jdbcType=VARCHAR},
      #{studentage,jdbcType=INTEGER}, #{studentphone,jdbcType=VARCHAR}, #{studentschool,jdbcType=VARCHAR}, 
      #{studentnumber,jdbcType=VARCHAR}, #{studentgrade,jdbcType=VARCHAR}, #{studentremark,jdbcType=VARCHAR}, 
      #{studentregistertime,jdbcType=TIMESTAMP})
  </insert>
  <insert id="insertSelective" parameterType="team.ustc.sse.blockly.entity.Student" >
    <selectKey resultType="java.lang.Integer" keyProperty="studentid" order="AFTER" >
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into student
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="studentname != null" >
        studentName,
      </if>
      <if test="studentgender != null" >
        studentGender,
      </if>
      <if test="studentemail != null" >
        studentEmail,
      </if>
      <if test="studentage != null" >
        studentAge,
      </if>
      <if test="studentphone != null" >
        studentPhone,
      </if>
      <if test="studentschool != null" >
        studentSchool,
      </if>
      <if test="studentnumber != null" >
        studentNumber,
      </if>
      <if test="studentgrade != null" >
        studentGrade,
      </if>
      <if test="studentremark != null" >
        studentRemark,
      </if>
      <if test="studentregistertime != null" >
        studentRegisterTime,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="studentname != null" >
        #{studentname,jdbcType=VARCHAR},
      </if>
      <if test="studentgender != null" >
        #{studentgender,jdbcType=VARCHAR},
      </if>
      <if test="studentemail != null" >
        #{studentemail,jdbcType=VARCHAR},
      </if>
      <if test="studentage != null" >
        #{studentage,jdbcType=INTEGER},
      </if>
      <if test="studentphone != null" >
        #{studentphone,jdbcType=VARCHAR},
      </if>
      <if test="studentschool != null" >
        #{studentschool,jdbcType=VARCHAR},
      </if>
      <if test="studentnumber != null" >
        #{studentnumber,jdbcType=VARCHAR},
      </if>
      <if test="studentgrade != null" >
        #{studentgrade,jdbcType=VARCHAR},
      </if>
      <if test="studentremark != null" >
        #{studentremark,jdbcType=VARCHAR},
      </if>
      <if test="studentregistertime != null" >
        #{studentregistertime,jdbcType=TIMESTAMP},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="team.ustc.sse.blockly.entity.StudentExample" resultType="java.lang.Integer" >
    select count(*) from student
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map" >
    update student
    <set >
      <if test="record.studentid != null" >
        studentID = #{record.studentid,jdbcType=INTEGER},
      </if>
      <if test="record.studentname != null" >
        studentName = #{record.studentname,jdbcType=VARCHAR},
      </if>
      <if test="record.studentgender != null" >
        studentGender = #{record.studentgender,jdbcType=VARCHAR},
      </if>
      <if test="record.studentemail != null" >
        studentEmail = #{record.studentemail,jdbcType=VARCHAR},
      </if>
      <if test="record.studentage != null" >
        studentAge = #{record.studentage,jdbcType=INTEGER},
      </if>
      <if test="record.studentphone != null" >
        studentPhone = #{record.studentphone,jdbcType=VARCHAR},
      </if>
      <if test="record.studentschool != null" >
        studentSchool = #{record.studentschool,jdbcType=VARCHAR},
      </if>
      <if test="record.studentnumber != null" >
        studentNumber = #{record.studentnumber,jdbcType=VARCHAR},
      </if>
      <if test="record.studentgrade != null" >
        studentGrade = #{record.studentgrade,jdbcType=VARCHAR},
      </if>
      <if test="record.studentremark != null" >
        studentRemark = #{record.studentremark,jdbcType=VARCHAR},
      </if>
      <if test="record.studentregistertime != null" >
        studentRegisterTime = #{record.studentregistertime,jdbcType=TIMESTAMP},
      </if>
    </set>
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map" >
    update student
    set studentID = #{record.studentid,jdbcType=INTEGER},
      studentName = #{record.studentname,jdbcType=VARCHAR},
      studentGender = #{record.studentgender,jdbcType=VARCHAR},
      studentEmail = #{record.studentemail,jdbcType=VARCHAR},
      studentAge = #{record.studentage,jdbcType=INTEGER},
      studentPhone = #{record.studentphone,jdbcType=VARCHAR},
      studentSchool = #{record.studentschool,jdbcType=VARCHAR},
      studentNumber = #{record.studentnumber,jdbcType=VARCHAR},
      studentGrade = #{record.studentgrade,jdbcType=VARCHAR},
      studentRemark = #{record.studentremark,jdbcType=VARCHAR},
      studentRegisterTime = #{record.studentregistertime,jdbcType=TIMESTAMP}
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="team.ustc.sse.blockly.entity.Student" >
    update student
    <set >
      <if test="studentname != null" >
        studentName = #{studentname,jdbcType=VARCHAR},
      </if>
      <if test="studentgender != null" >
        studentGender = #{studentgender,jdbcType=VARCHAR},
      </if>
      <if test="studentemail != null" >
        studentEmail = #{studentemail,jdbcType=VARCHAR},
      </if>
      <if test="studentage != null" >
        studentAge = #{studentage,jdbcType=INTEGER},
      </if>
      <if test="studentphone != null" >
        studentPhone = #{studentphone,jdbcType=VARCHAR},
      </if>
      <if test="studentschool != null" >
        studentSchool = #{studentschool,jdbcType=VARCHAR},
      </if>
      <if test="studentnumber != null" >
        studentNumber = #{studentnumber,jdbcType=VARCHAR},
      </if>
      <if test="studentgrade != null" >
        studentGrade = #{studentgrade,jdbcType=VARCHAR},
      </if>
      <if test="studentremark != null" >
        studentRemark = #{studentremark,jdbcType=VARCHAR},
      </if>
      <if test="studentregistertime != null" >
        studentRegisterTime = #{studentregistertime,jdbcType=TIMESTAMP},
      </if>
    </set>
    where studentID = #{studentid,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="team.ustc.sse.blockly.entity.Student" >
    update student
    set studentName = #{studentname,jdbcType=VARCHAR},
      studentGender = #{studentgender,jdbcType=VARCHAR},
      studentEmail = #{studentemail,jdbcType=VARCHAR},
      studentAge = #{studentage,jdbcType=INTEGER},
      studentPhone = #{studentphone,jdbcType=VARCHAR},
      studentSchool = #{studentschool,jdbcType=VARCHAR},
      studentNumber = #{studentnumber,jdbcType=VARCHAR},
      studentGrade = #{studentgrade,jdbcType=VARCHAR},
      studentRemark = #{studentremark,jdbcType=VARCHAR},
      studentRegisterTime = #{studentregistertime,jdbcType=TIMESTAMP}
    where studentID = #{studentid,jdbcType=INTEGER}
  </update>
</mapper>